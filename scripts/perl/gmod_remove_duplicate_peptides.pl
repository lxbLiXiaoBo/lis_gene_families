#!/usr/bin/env perl


use strict;
use warnings;
use Getopt::Long; # gets the command line options
use Pod::Usage; # so the user knows what's going on
use DBI; # our DataBase Interface


=head1 NAME

 gmod_remove_duplicate_peptides.pl - Rmoves duplicate polypeptides from a chado database.

=head1 SYNOPSIS

  gmod_remove_duplicate_polypeptides.pl [options]

  --organismid      The organism_id from the organism table to have duplicates removed for
  --dbname          The name of the chado database (default=chada)
  --username        The username to access the database with (default=chado)
  --password        The password to log into the database with
  --host            The host the database is on (deafult=localhost)
  --port            The port the database is on

=head1 DESCRIPTION

Determines if a polypeptide is a duplicate by assuming that there is a one-to-one relationship between polypeptides and mRNAs. All polypeptides that have a relationship with the same mRNA are retreived and then compared for uniqueness. If they are identical, the one with the lowest autogenerated unique identifier is considered the orginial and all others are deleted.

=head1 AUTHOR

Alan Cleary

Copyright (c) 2013 
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut


# see if the user needs help
my $man = 0;
my $help = 0;
GetOptions('help|?' => \$help, man => \$man) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitval => 0, -verbose => 2) if $man;


# get the values from the command line options
my $organism;
my $dbname = 'chado';
$dbname = $ENV{CHADO_DB_NAME} if ($ENV{CHADO_DB_NAME});
my $username = 'chado';
$username = $ENV{CHADO_DB_USER} if ($ENV{CHADO_DB_USER});
my $password = '';
$password = $ENV{CHADO_DB_PASS} if ($ENV{CHADO_DB_PASS});
my $host = 'localhost';
$host = $ENV{CHADO_DB_HOST} if ($ENV{CHADO_DB_HOST});
my $port;
$port = $ENV{CHADO_DB_PORT} if ($ENV{CHADO_DB_PORT});

GetOptions("organismid=i"   => \$organism,
           "dbname=s"       => \$dbname,
           "username=s"     => \$username,
           "password=s"     => \$password,
           "host=s"         => \$host,
           "port=i"         => \$port) || die("Error in command line arguments\n");


# make sure there weren't any unexpected command line aguments
if (@ARGV > 0) {
    pod2usage(2);
}


# set organism variable (note: we are assuming the feature table in the sql queries will be denoted by "f")
$organism = ($organism) ? "AND f.organism_id=" . $organism : "";


# create a data source name
my $dsn = "dbi:Pg:dbname=$dbname;host=$host;";
$dsn .= "port=$port;" if $port;


# connect to the database
my $conn = DBI->connect($dsn, $username, $password, {'RaiseError' => 1});


# get the cvterm_id for polypeptide
my $polypeptide = $conn->selectrow_array("SELECT cvterm_id FROM cvterm WHERE name LIKE 'polypeptide';");


# get all polypeptides that have duplicates
my $query = $conn->prepare(
    "SELECT fr.subject_id " .
    "FROM feature_relationship fr, feature f " .
    "WHERE fr.subject_id=f.feature_id " .
    "AND f.type_id=$polypeptide $organism AND object_id IN " .
    "(SELECT fr.object_id " .
    "FROM feature_relationship fr, feature f " .
    "WHERE fr.subject_id=f.feature_id AND f.type_id=$polypeptide $organism " .
    "GROUP BY fr.object_id HAVING COUNT(*) > 1);"
    );
$query->execute();


# put them into an array
my @suspicious = ();
while (my $row = $query->fetchrow_array()) {
    push(@suspicious, $row);
}


# report how many suspicious polypeptides were found
my $num_suspicious = scalar(@suspicious);
print "$num_suspicious suspicious polypeptides found\n";
if ($num_suspicious == 0) {
    die("No need to continue evaluation\nQuiting...\n");
}


# get all the all the original polypeptides that were later duplicated
$query = $conn->prepare(
    "SELECT MIN(feature_id) " .
    "FROM featureloc " .
    "WHERE feature_id IN " .
    "(SELECT fr.subject_id FROM feature_relationship fr, feature f " .
    "WHERE fr.subject_id=f.feature_id AND f.type_id=$polypeptide $organism AND object_id IN " .
    "(SELECT fr.object_id FROM feature_relationship fr, feature f " .
    "WHERE fr.subject_id=f.feature_id AND f.type_id=$polypeptide $organism " .
    "GROUP BY fr.object_id HAVING COUNT(*) > 1)) " .
    "GROUP BY srcfeature_id,fmin,is_fmin_partial,fmax,is_fmax_partial,strand,phase,residue_info,locgroup,rank;"
    );
$query->execute();


# put them into an array
my @keepers = ();
while (my $row = $query->fetchrow_array()) {
    push(@keepers, $row);
}


# put the duplicate polypeptides into an array
my @duplicates = grep { ! ( $_ ~~ @keepers ) } @suspicious;


# report how many will be kept and how many will be removed
my $num_duplicates = scalar(@duplicates);
print scalar(@keepers)," will be kept\n$num_duplicates will be removed\n";
if ($num_duplicates == 0) {
    die("No need to continue evaluating\nQuiting...\n");
}


# remove the duplicate polypeptides
my $delete_query = "DELETE FROM feature WHERE";
foreach my $peptide (@duplicates) {
    #$delete_query .= " feature_id=$polypeptide or";
    $conn->do("DELETE FROM feature WHERE feature_id=$peptide;");
}


# let the user know all is well
print "Duplicates removed\nQuiting...\n";


# release variables and close database connection
undef($query);
$conn->disconnect();


